// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.com/egg-be/egg-backend/internal/domain"
)

// RedisInterface is an autogenerated mock type for the RedisInterface type
type RedisInterface struct {
	mock.Mock
}

type RedisInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisInterface) EXPECT() *RedisInterface_Expecter {
	return &RedisInterface_Expecter{mock: &_m.Mock}
}

// ReadGlobalLeaderboardPlayerRank provides a mock function with given fields: ctx, uid
func (_m *RedisInterface) ReadGlobalLeaderboardPlayerRank(ctx context.Context, uid int64) (int64, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for ReadGlobalLeaderboardPlayerRank")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisInterface_ReadGlobalLeaderboardPlayerRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGlobalLeaderboardPlayerRank'
type RedisInterface_ReadGlobalLeaderboardPlayerRank_Call struct {
	*mock.Call
}

// ReadGlobalLeaderboardPlayerRank is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *RedisInterface_Expecter) ReadGlobalLeaderboardPlayerRank(ctx interface{}, uid interface{}) *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call {
	return &RedisInterface_ReadGlobalLeaderboardPlayerRank_Call{Call: _e.mock.On("ReadGlobalLeaderboardPlayerRank", ctx, uid)}
}

func (_c *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call) Run(run func(ctx context.Context, uid int64)) *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call) Return(_a0 int64, _a1 error) *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *RedisInterface_ReadGlobalLeaderboardPlayerRank_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGlobalLeaderboardRanks provides a mock function with given fields: ctx, limit, skip
func (_m *RedisInterface) ReadGlobalLeaderboardRanks(ctx context.Context, limit int64, skip int64) ([]int64, error) {
	ret := _m.Called(ctx, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for ReadGlobalLeaderboardRanks")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]int64, error)); ok {
		return rf(ctx, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []int64); ok {
		r0 = rf(ctx, limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisInterface_ReadGlobalLeaderboardRanks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGlobalLeaderboardRanks'
type RedisInterface_ReadGlobalLeaderboardRanks_Call struct {
	*mock.Call
}

// ReadGlobalLeaderboardRanks is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - skip int64
func (_e *RedisInterface_Expecter) ReadGlobalLeaderboardRanks(ctx interface{}, limit interface{}, skip interface{}) *RedisInterface_ReadGlobalLeaderboardRanks_Call {
	return &RedisInterface_ReadGlobalLeaderboardRanks_Call{Call: _e.mock.On("ReadGlobalLeaderboardRanks", ctx, limit, skip)}
}

func (_c *RedisInterface_ReadGlobalLeaderboardRanks_Call) Run(run func(ctx context.Context, limit int64, skip int64)) *RedisInterface_ReadGlobalLeaderboardRanks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *RedisInterface_ReadGlobalLeaderboardRanks_Call) Return(_a0 []int64, _a1 error) *RedisInterface_ReadGlobalLeaderboardRanks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisInterface_ReadGlobalLeaderboardRanks_Call) RunAndReturn(run func(context.Context, int64, int64) ([]int64, error)) *RedisInterface_ReadGlobalLeaderboardRanks_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLevelLeaderboardPlayerRank provides a mock function with given fields: ctx, uid, level
func (_m *RedisInterface) ReadLevelLeaderboardPlayerRank(ctx context.Context, uid int64, level domain.Level) (int64, error) {
	ret := _m.Called(ctx, uid, level)

	if len(ret) == 0 {
		panic("no return value specified for ReadLevelLeaderboardPlayerRank")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Level) (int64, error)); ok {
		return rf(ctx, uid, level)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Level) int64); ok {
		r0 = rf(ctx, uid, level)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.Level) error); ok {
		r1 = rf(ctx, uid, level)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisInterface_ReadLevelLeaderboardPlayerRank_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLevelLeaderboardPlayerRank'
type RedisInterface_ReadLevelLeaderboardPlayerRank_Call struct {
	*mock.Call
}

// ReadLevelLeaderboardPlayerRank is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - level domain.Level
func (_e *RedisInterface_Expecter) ReadLevelLeaderboardPlayerRank(ctx interface{}, uid interface{}, level interface{}) *RedisInterface_ReadLevelLeaderboardPlayerRank_Call {
	return &RedisInterface_ReadLevelLeaderboardPlayerRank_Call{Call: _e.mock.On("ReadLevelLeaderboardPlayerRank", ctx, uid, level)}
}

func (_c *RedisInterface_ReadLevelLeaderboardPlayerRank_Call) Run(run func(ctx context.Context, uid int64, level domain.Level)) *RedisInterface_ReadLevelLeaderboardPlayerRank_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.Level))
	})
	return _c
}

func (_c *RedisInterface_ReadLevelLeaderboardPlayerRank_Call) Return(_a0 int64, _a1 error) *RedisInterface_ReadLevelLeaderboardPlayerRank_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisInterface_ReadLevelLeaderboardPlayerRank_Call) RunAndReturn(run func(context.Context, int64, domain.Level) (int64, error)) *RedisInterface_ReadLevelLeaderboardPlayerRank_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLevelLeaderboardRanks provides a mock function with given fields: ctx, level, limit, skip
func (_m *RedisInterface) ReadLevelLeaderboardRanks(ctx context.Context, level domain.Level, limit int64, skip int64) ([]int64, error) {
	ret := _m.Called(ctx, level, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for ReadLevelLeaderboardRanks")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Level, int64, int64) ([]int64, error)); ok {
		return rf(ctx, level, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Level, int64, int64) []int64); ok {
		r0 = rf(ctx, level, limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Level, int64, int64) error); ok {
		r1 = rf(ctx, level, limit, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisInterface_ReadLevelLeaderboardRanks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLevelLeaderboardRanks'
type RedisInterface_ReadLevelLeaderboardRanks_Call struct {
	*mock.Call
}

// ReadLevelLeaderboardRanks is a helper method to define mock.On call
//   - ctx context.Context
//   - level domain.Level
//   - limit int64
//   - skip int64
func (_e *RedisInterface_Expecter) ReadLevelLeaderboardRanks(ctx interface{}, level interface{}, limit interface{}, skip interface{}) *RedisInterface_ReadLevelLeaderboardRanks_Call {
	return &RedisInterface_ReadLevelLeaderboardRanks_Call{Call: _e.mock.On("ReadLevelLeaderboardRanks", ctx, level, limit, skip)}
}

func (_c *RedisInterface_ReadLevelLeaderboardRanks_Call) Run(run func(ctx context.Context, level domain.Level, limit int64, skip int64)) *RedisInterface_ReadLevelLeaderboardRanks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Level), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *RedisInterface_ReadLevelLeaderboardRanks_Call) Return(_a0 []int64, _a1 error) *RedisInterface_ReadLevelLeaderboardRanks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisInterface_ReadLevelLeaderboardRanks_Call) RunAndReturn(run func(context.Context, domain.Level, int64, int64) ([]int64, error)) *RedisInterface_ReadLevelLeaderboardRanks_Call {
	_c.Call.Return(run)
	return _c
}

// SetLeaderboardPlayerPoints provides a mock function with given fields: ctx, uid, level, points
func (_m *RedisInterface) SetLeaderboardPlayerPoints(ctx context.Context, uid int64, level domain.Level, points int) error {
	ret := _m.Called(ctx, uid, level, points)

	if len(ret) == 0 {
		panic("no return value specified for SetLeaderboardPlayerPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Level, int) error); ok {
		r0 = rf(ctx, uid, level, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisInterface_SetLeaderboardPlayerPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLeaderboardPlayerPoints'
type RedisInterface_SetLeaderboardPlayerPoints_Call struct {
	*mock.Call
}

// SetLeaderboardPlayerPoints is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - level domain.Level
//   - points int
func (_e *RedisInterface_Expecter) SetLeaderboardPlayerPoints(ctx interface{}, uid interface{}, level interface{}, points interface{}) *RedisInterface_SetLeaderboardPlayerPoints_Call {
	return &RedisInterface_SetLeaderboardPlayerPoints_Call{Call: _e.mock.On("SetLeaderboardPlayerPoints", ctx, uid, level, points)}
}

func (_c *RedisInterface_SetLeaderboardPlayerPoints_Call) Run(run func(ctx context.Context, uid int64, level domain.Level, points int)) *RedisInterface_SetLeaderboardPlayerPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.Level), args[3].(int))
	})
	return _c
}

func (_c *RedisInterface_SetLeaderboardPlayerPoints_Call) Return(_a0 error) *RedisInterface_SetLeaderboardPlayerPoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisInterface_SetLeaderboardPlayerPoints_Call) RunAndReturn(run func(context.Context, int64, domain.Level, int) error) *RedisInterface_SetLeaderboardPlayerPoints_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisInterface creates a new instance of RedisInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisInterface {
	mock := &RedisInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
