// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "gitlab.com/egg-be/egg-backend/internal/domain"

	uuid "github.com/google/uuid"
)

// DBInterface is an autogenerated mock type for the DBInterface type
type DBInterface struct {
	mock.Mock
}

type DBInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DBInterface) EXPECT() *DBInterface_Expecter {
	return &DBInterface_Expecter{mock: &_m.Mock}
}

// CheckUserNickname provides a mock function with given fields: ctx, nickname
func (_m *DBInterface) CheckUserNickname(ctx context.Context, nickname string) (bool, error) {
	ret := _m.Called(ctx, nickname)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserNickname")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, nickname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, nickname)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_CheckUserNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserNickname'
type DBInterface_CheckUserNickname_Call struct {
	*mock.Call
}

// CheckUserNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - nickname string
func (_e *DBInterface_Expecter) CheckUserNickname(ctx interface{}, nickname interface{}) *DBInterface_CheckUserNickname_Call {
	return &DBInterface_CheckUserNickname_Call{Call: _e.mock.On("CheckUserNickname", ctx, nickname)}
}

func (_c *DBInterface_CheckUserNickname_Call) Run(run func(ctx context.Context, nickname string)) *DBInterface_CheckUserNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DBInterface_CheckUserNickname_Call) Return(_a0 bool, _a1 error) *DBInterface_CheckUserNickname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_CheckUserNickname_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *DBInterface_CheckUserNickname_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *DBInterface) CreateUser(ctx context.Context, user *domain.UserDocument) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserDocument) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type DBInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.UserDocument
func (_e *DBInterface_Expecter) CreateUser(ctx interface{}, user interface{}) *DBInterface_CreateUser_Call {
	return &DBInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *DBInterface_CreateUser_Call) Run(run func(ctx context.Context, user *domain.UserDocument)) *DBInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UserDocument))
	})
	return _c
}

func (_c *DBInterface_CreateUser_Call) Return(_a0 error) *DBInterface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_CreateUser_Call) RunAndReturn(run func(context.Context, *domain.UserDocument) error) *DBInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserAutoClicker provides a mock function with given fields: ctx, uid, cost
func (_m *DBInterface) CreateUserAutoClicker(ctx context.Context, uid int64, cost int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, cost)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAutoClicker")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, cost)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, cost)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, uid, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_CreateUserAutoClicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAutoClicker'
type DBInterface_CreateUserAutoClicker_Call struct {
	*mock.Call
}

// CreateUserAutoClicker is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - cost int
func (_e *DBInterface_Expecter) CreateUserAutoClicker(ctx interface{}, uid interface{}, cost interface{}) *DBInterface_CreateUserAutoClicker_Call {
	return &DBInterface_CreateUserAutoClicker_Call{Call: _e.mock.On("CreateUserAutoClicker", ctx, uid, cost)}
}

func (_c *DBInterface_CreateUserAutoClicker_Call) Run(run func(ctx context.Context, uid int64, cost int)) *DBInterface_CreateUserAutoClicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *DBInterface_CreateUserAutoClicker_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_CreateUserAutoClicker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_CreateUserAutoClicker_Call) RunAndReturn(run func(context.Context, int64, int) (domain.UserDocument, error)) *DBInterface_CreateUserAutoClicker_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDocumentWithID provides a mock function with given fields: ctx, uid
func (_m *DBInterface) GetUserDocumentWithID(ctx context.Context, uid int64) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDocumentWithID")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.UserDocument, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.UserDocument); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_GetUserDocumentWithID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDocumentWithID'
type DBInterface_GetUserDocumentWithID_Call struct {
	*mock.Call
}

// GetUserDocumentWithID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *DBInterface_Expecter) GetUserDocumentWithID(ctx interface{}, uid interface{}) *DBInterface_GetUserDocumentWithID_Call {
	return &DBInterface_GetUserDocumentWithID_Call{Call: _e.mock.On("GetUserDocumentWithID", ctx, uid)}
}

func (_c *DBInterface_GetUserDocumentWithID_Call) Run(run func(ctx context.Context, uid int64)) *DBInterface_GetUserDocumentWithID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DBInterface_GetUserDocumentWithID_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_GetUserDocumentWithID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_GetUserDocumentWithID_Call) RunAndReturn(run func(context.Context, int64) (domain.UserDocument, error)) *DBInterface_GetUserDocumentWithID_Call {
	_c.Call.Return(run)
	return _c
}

// IncPoints provides a mock function with given fields: ctx, uid, points
func (_m *DBInterface) IncPoints(ctx context.Context, uid int64, points int) (int, error) {
	ret := _m.Called(ctx, uid, points)

	if len(ret) == 0 {
		panic("no return value specified for IncPoints")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) (int, error)); ok {
		return rf(ctx, uid, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) int); ok {
		r0 = rf(ctx, uid, points)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, uid, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_IncPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncPoints'
type DBInterface_IncPoints_Call struct {
	*mock.Call
}

// IncPoints is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - points int
func (_e *DBInterface_Expecter) IncPoints(ctx interface{}, uid interface{}, points interface{}) *DBInterface_IncPoints_Call {
	return &DBInterface_IncPoints_Call{Call: _e.mock.On("IncPoints", ctx, uid, points)}
}

func (_c *DBInterface_IncPoints_Call) Run(run func(ctx context.Context, uid int64, points int)) *DBInterface_IncPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *DBInterface_IncPoints_Call) Return(_a0 int, _a1 error) *DBInterface_IncPoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_IncPoints_Call) RunAndReturn(run func(context.Context, int64, int) (int, error)) *DBInterface_IncPoints_Call {
	_c.Call.Return(run)
	return _c
}

// IncPointsWithReferral provides a mock function with given fields: ctx, uid, points
func (_m *DBInterface) IncPointsWithReferral(ctx context.Context, uid int64, points int) (int, error) {
	ret := _m.Called(ctx, uid, points)

	if len(ret) == 0 {
		panic("no return value specified for IncPointsWithReferral")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) (int, error)); ok {
		return rf(ctx, uid, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) int); ok {
		r0 = rf(ctx, uid, points)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, uid, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_IncPointsWithReferral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncPointsWithReferral'
type DBInterface_IncPointsWithReferral_Call struct {
	*mock.Call
}

// IncPointsWithReferral is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - points int
func (_e *DBInterface_Expecter) IncPointsWithReferral(ctx interface{}, uid interface{}, points interface{}) *DBInterface_IncPointsWithReferral_Call {
	return &DBInterface_IncPointsWithReferral_Call{Call: _e.mock.On("IncPointsWithReferral", ctx, uid, points)}
}

func (_c *DBInterface_IncPointsWithReferral_Call) Run(run func(ctx context.Context, uid int64, points int)) *DBInterface_IncPointsWithReferral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *DBInterface_IncPointsWithReferral_Call) Return(_a0 int, _a1 error) *DBInterface_IncPointsWithReferral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_IncPointsWithReferral_Call) RunAndReturn(run func(context.Context, int64, int) (int, error)) *DBInterface_IncPointsWithReferral_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFriendsLeaderboardPlayers provides a mock function with given fields: ctx, uid, limit, skip
func (_m *DBInterface) ReadFriendsLeaderboardPlayers(ctx context.Context, uid int64, limit int64, skip int64) ([]domain.LeaderboardPlayer, error) {
	ret := _m.Called(ctx, uid, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for ReadFriendsLeaderboardPlayers")
	}

	var r0 []domain.LeaderboardPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]domain.LeaderboardPlayer, error)); ok {
		return rf(ctx, uid, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []domain.LeaderboardPlayer); ok {
		r0 = rf(ctx, uid, limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LeaderboardPlayer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, uid, limit, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadFriendsLeaderboardPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFriendsLeaderboardPlayers'
type DBInterface_ReadFriendsLeaderboardPlayers_Call struct {
	*mock.Call
}

// ReadFriendsLeaderboardPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - limit int64
//   - skip int64
func (_e *DBInterface_Expecter) ReadFriendsLeaderboardPlayers(ctx interface{}, uid interface{}, limit interface{}, skip interface{}) *DBInterface_ReadFriendsLeaderboardPlayers_Call {
	return &DBInterface_ReadFriendsLeaderboardPlayers_Call{Call: _e.mock.On("ReadFriendsLeaderboardPlayers", ctx, uid, limit, skip)}
}

func (_c *DBInterface_ReadFriendsLeaderboardPlayers_Call) Run(run func(ctx context.Context, uid int64, limit int64, skip int64)) *DBInterface_ReadFriendsLeaderboardPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *DBInterface_ReadFriendsLeaderboardPlayers_Call) Return(_a0 []domain.LeaderboardPlayer, _a1 error) *DBInterface_ReadFriendsLeaderboardPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadFriendsLeaderboardPlayers_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]domain.LeaderboardPlayer, error)) *DBInterface_ReadFriendsLeaderboardPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFriendsLeaderboardTotalPlayers provides a mock function with given fields: ctx, uid
func (_m *DBInterface) ReadFriendsLeaderboardTotalPlayers(ctx context.Context, uid int64) (int64, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for ReadFriendsLeaderboardTotalPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadFriendsLeaderboardTotalPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFriendsLeaderboardTotalPlayers'
type DBInterface_ReadFriendsLeaderboardTotalPlayers_Call struct {
	*mock.Call
}

// ReadFriendsLeaderboardTotalPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *DBInterface_Expecter) ReadFriendsLeaderboardTotalPlayers(ctx interface{}, uid interface{}) *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call {
	return &DBInterface_ReadFriendsLeaderboardTotalPlayers_Call{Call: _e.mock.On("ReadFriendsLeaderboardTotalPlayers", ctx, uid)}
}

func (_c *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call) Run(run func(ctx context.Context, uid int64)) *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call) Return(_a0 int64, _a1 error) *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *DBInterface_ReadFriendsLeaderboardTotalPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGlobalLeaderboardTotalPlayers provides a mock function with given fields: ctx
func (_m *DBInterface) ReadGlobalLeaderboardTotalPlayers(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadGlobalLeaderboardTotalPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadGlobalLeaderboardTotalPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGlobalLeaderboardTotalPlayers'
type DBInterface_ReadGlobalLeaderboardTotalPlayers_Call struct {
	*mock.Call
}

// ReadGlobalLeaderboardTotalPlayers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DBInterface_Expecter) ReadGlobalLeaderboardTotalPlayers(ctx interface{}) *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call {
	return &DBInterface_ReadGlobalLeaderboardTotalPlayers_Call{Call: _e.mock.On("ReadGlobalLeaderboardTotalPlayers", ctx)}
}

func (_c *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call) Run(run func(ctx context.Context)) *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call) Return(_a0 int64, _a1 error) *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call) RunAndReturn(run func(context.Context) (int64, error)) *DBInterface_ReadGlobalLeaderboardTotalPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLeaderboardPlayer provides a mock function with given fields: ctx, uid
func (_m *DBInterface) ReadLeaderboardPlayer(ctx context.Context, uid int64) (domain.LeaderboardPlayer, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for ReadLeaderboardPlayer")
	}

	var r0 domain.LeaderboardPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.LeaderboardPlayer, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.LeaderboardPlayer); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(domain.LeaderboardPlayer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadLeaderboardPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLeaderboardPlayer'
type DBInterface_ReadLeaderboardPlayer_Call struct {
	*mock.Call
}

// ReadLeaderboardPlayer is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *DBInterface_Expecter) ReadLeaderboardPlayer(ctx interface{}, uid interface{}) *DBInterface_ReadLeaderboardPlayer_Call {
	return &DBInterface_ReadLeaderboardPlayer_Call{Call: _e.mock.On("ReadLeaderboardPlayer", ctx, uid)}
}

func (_c *DBInterface_ReadLeaderboardPlayer_Call) Run(run func(ctx context.Context, uid int64)) *DBInterface_ReadLeaderboardPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DBInterface_ReadLeaderboardPlayer_Call) Return(_a0 domain.LeaderboardPlayer, _a1 error) *DBInterface_ReadLeaderboardPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadLeaderboardPlayer_Call) RunAndReturn(run func(context.Context, int64) (domain.LeaderboardPlayer, error)) *DBInterface_ReadLeaderboardPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLeaderboardPlayers provides a mock function with given fields: ctx, uids
func (_m *DBInterface) ReadLeaderboardPlayers(ctx context.Context, uids []int64) ([]domain.LeaderboardPlayer, error) {
	ret := _m.Called(ctx, uids)

	if len(ret) == 0 {
		panic("no return value specified for ReadLeaderboardPlayers")
	}

	var r0 []domain.LeaderboardPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]domain.LeaderboardPlayer, error)); ok {
		return rf(ctx, uids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []domain.LeaderboardPlayer); ok {
		r0 = rf(ctx, uids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.LeaderboardPlayer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, uids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadLeaderboardPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLeaderboardPlayers'
type DBInterface_ReadLeaderboardPlayers_Call struct {
	*mock.Call
}

// ReadLeaderboardPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - uids []int64
func (_e *DBInterface_Expecter) ReadLeaderboardPlayers(ctx interface{}, uids interface{}) *DBInterface_ReadLeaderboardPlayers_Call {
	return &DBInterface_ReadLeaderboardPlayers_Call{Call: _e.mock.On("ReadLeaderboardPlayers", ctx, uids)}
}

func (_c *DBInterface_ReadLeaderboardPlayers_Call) Run(run func(ctx context.Context, uids []int64)) *DBInterface_ReadLeaderboardPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *DBInterface_ReadLeaderboardPlayers_Call) Return(_a0 []domain.LeaderboardPlayer, _a1 error) *DBInterface_ReadLeaderboardPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadLeaderboardPlayers_Call) RunAndReturn(run func(context.Context, []int64) ([]domain.LeaderboardPlayer, error)) *DBInterface_ReadLeaderboardPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLevelLeaderboardTotalPlayers provides a mock function with given fields: ctx, level
func (_m *DBInterface) ReadLevelLeaderboardTotalPlayers(ctx context.Context, level domain.Level) (int64, error) {
	ret := _m.Called(ctx, level)

	if len(ret) == 0 {
		panic("no return value specified for ReadLevelLeaderboardTotalPlayers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Level) (int64, error)); ok {
		return rf(ctx, level)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Level) int64); ok {
		r0 = rf(ctx, level)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Level) error); ok {
		r1 = rf(ctx, level)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadLevelLeaderboardTotalPlayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLevelLeaderboardTotalPlayers'
type DBInterface_ReadLevelLeaderboardTotalPlayers_Call struct {
	*mock.Call
}

// ReadLevelLeaderboardTotalPlayers is a helper method to define mock.On call
//   - ctx context.Context
//   - level domain.Level
func (_e *DBInterface_Expecter) ReadLevelLeaderboardTotalPlayers(ctx interface{}, level interface{}) *DBInterface_ReadLevelLeaderboardTotalPlayers_Call {
	return &DBInterface_ReadLevelLeaderboardTotalPlayers_Call{Call: _e.mock.On("ReadLevelLeaderboardTotalPlayers", ctx, level)}
}

func (_c *DBInterface_ReadLevelLeaderboardTotalPlayers_Call) Run(run func(ctx context.Context, level domain.Level)) *DBInterface_ReadLevelLeaderboardTotalPlayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Level))
	})
	return _c
}

func (_c *DBInterface_ReadLevelLeaderboardTotalPlayers_Call) Return(_a0 int64, _a1 error) *DBInterface_ReadLevelLeaderboardTotalPlayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadLevelLeaderboardTotalPlayers_Call) RunAndReturn(run func(context.Context, domain.Level) (int64, error)) *DBInterface_ReadLevelLeaderboardTotalPlayers_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTotalUserReferrals provides a mock function with given fields: ctx, uid
func (_m *DBInterface) ReadTotalUserReferrals(ctx context.Context, uid int64) (int64, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for ReadTotalUserReferrals")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_ReadTotalUserReferrals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTotalUserReferrals'
type DBInterface_ReadTotalUserReferrals_Call struct {
	*mock.Call
}

// ReadTotalUserReferrals is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *DBInterface_Expecter) ReadTotalUserReferrals(ctx interface{}, uid interface{}) *DBInterface_ReadTotalUserReferrals_Call {
	return &DBInterface_ReadTotalUserReferrals_Call{Call: _e.mock.On("ReadTotalUserReferrals", ctx, uid)}
}

func (_c *DBInterface_ReadTotalUserReferrals_Call) Run(run func(ctx context.Context, uid int64)) *DBInterface_ReadTotalUserReferrals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DBInterface_ReadTotalUserReferrals_Call) Return(_a0 int64, _a1 error) *DBInterface_ReadTotalUserReferrals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_ReadTotalUserReferrals_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *DBInterface_ReadTotalUserReferrals_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUserFriends provides a mock function with given fields: ctx, uid, limit, skip
func (_m *DBInterface) ReadUserFriends(ctx context.Context, uid int64, limit int64, skip int64) ([]domain.Friend, int64, error) {
	ret := _m.Called(ctx, uid, limit, skip)

	if len(ret) == 0 {
		panic("no return value specified for ReadUserFriends")
	}

	var r0 []domain.Friend
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]domain.Friend, int64, error)); ok {
		return rf(ctx, uid, limit, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []domain.Friend); ok {
		r0 = rf(ctx, uid, limit, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) int64); ok {
		r1 = rf(ctx, uid, limit, skip)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, int64) error); ok {
		r2 = rf(ctx, uid, limit, skip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DBInterface_ReadUserFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUserFriends'
type DBInterface_ReadUserFriends_Call struct {
	*mock.Call
}

// ReadUserFriends is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - limit int64
//   - skip int64
func (_e *DBInterface_Expecter) ReadUserFriends(ctx interface{}, uid interface{}, limit interface{}, skip interface{}) *DBInterface_ReadUserFriends_Call {
	return &DBInterface_ReadUserFriends_Call{Call: _e.mock.On("ReadUserFriends", ctx, uid, limit, skip)}
}

func (_c *DBInterface_ReadUserFriends_Call) Run(run func(ctx context.Context, uid int64, limit int64, skip int64)) *DBInterface_ReadUserFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *DBInterface_ReadUserFriends_Call) Return(_a0 []domain.Friend, _a1 int64, _a2 error) *DBInterface_ReadUserFriends_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DBInterface_ReadUserFriends_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]domain.Friend, int64, error)) *DBInterface_ReadUserFriends_Call {
	_c.Call.Return(run)
	return _c
}

// SetDailyReward provides a mock function with given fields: ctx, uid, points, reward
func (_m *DBInterface) SetDailyReward(ctx context.Context, uid int64, points int, reward *domain.DailyReward) error {
	ret := _m.Called(ctx, uid, points, reward)

	if len(ret) == 0 {
		panic("no return value specified for SetDailyReward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, *domain.DailyReward) error); ok {
		r0 = rf(ctx, uid, points, reward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_SetDailyReward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDailyReward'
type DBInterface_SetDailyReward_Call struct {
	*mock.Call
}

// SetDailyReward is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - points int
//   - reward *domain.DailyReward
func (_e *DBInterface_Expecter) SetDailyReward(ctx interface{}, uid interface{}, points interface{}, reward interface{}) *DBInterface_SetDailyReward_Call {
	return &DBInterface_SetDailyReward_Call{Call: _e.mock.On("SetDailyReward", ctx, uid, points, reward)}
}

func (_c *DBInterface_SetDailyReward_Call) Run(run func(ctx context.Context, uid int64, points int, reward *domain.DailyReward)) *DBInterface_SetDailyReward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(*domain.DailyReward))
	})
	return _c
}

func (_c *DBInterface_SetDailyReward_Call) Return(_a0 error) *DBInterface_SetDailyReward_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_SetDailyReward_Call) RunAndReturn(run func(context.Context, int64, int, *domain.DailyReward) error) *DBInterface_SetDailyReward_Call {
	_c.Call.Return(run)
	return _c
}

// SetPoints provides a mock function with given fields: ctx, uid, points
func (_m *DBInterface) SetPoints(ctx context.Context, uid int64, points int) error {
	ret := _m.Called(ctx, uid, points)

	if len(ret) == 0 {
		panic("no return value specified for SetPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, uid, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_SetPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPoints'
type DBInterface_SetPoints_Call struct {
	*mock.Call
}

// SetPoints is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - points int
func (_e *DBInterface_Expecter) SetPoints(ctx interface{}, uid interface{}, points interface{}) *DBInterface_SetPoints_Call {
	return &DBInterface_SetPoints_Call{Call: _e.mock.On("SetPoints", ctx, uid, points)}
}

func (_c *DBInterface_SetPoints_Call) Run(run func(ctx context.Context, uid int64, points int)) *DBInterface_SetPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *DBInterface_SetPoints_Call) Return(_a0 error) *DBInterface_SetPoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_SetPoints_Call) RunAndReturn(run func(context.Context, int64, int) error) *DBInterface_SetPoints_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAutoClicker provides a mock function with given fields: ctx, uid, isEnabled
func (_m *DBInterface) UpdateUserAutoClicker(ctx context.Context, uid int64, isEnabled bool) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, isEnabled)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAutoClicker")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, isEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) domain.UserDocument); ok {
		r0 = rf(ctx, uid, isEnabled)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, uid, isEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserAutoClicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAutoClicker'
type DBInterface_UpdateUserAutoClicker_Call struct {
	*mock.Call
}

// UpdateUserAutoClicker is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - isEnabled bool
func (_e *DBInterface_Expecter) UpdateUserAutoClicker(ctx interface{}, uid interface{}, isEnabled interface{}) *DBInterface_UpdateUserAutoClicker_Call {
	return &DBInterface_UpdateUserAutoClicker_Call{Call: _e.mock.On("UpdateUserAutoClicker", ctx, uid, isEnabled)}
}

func (_c *DBInterface_UpdateUserAutoClicker_Call) Run(run func(ctx context.Context, uid int64, isEnabled bool)) *DBInterface_UpdateUserAutoClicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *DBInterface_UpdateUserAutoClicker_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserAutoClicker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserAutoClicker_Call) RunAndReturn(run func(context.Context, int64, bool) (domain.UserDocument, error)) *DBInterface_UpdateUserAutoClicker_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserDocument provides a mock function with given fields: ctx, u
func (_m *DBInterface) UpdateUserDocument(ctx context.Context, u *domain.UserDocument) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserDocument) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_UpdateUserDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserDocument'
type DBInterface_UpdateUserDocument_Call struct {
	*mock.Call
}

// UpdateUserDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - u *domain.UserDocument
func (_e *DBInterface_Expecter) UpdateUserDocument(ctx interface{}, u interface{}) *DBInterface_UpdateUserDocument_Call {
	return &DBInterface_UpdateUserDocument_Call{Call: _e.mock.On("UpdateUserDocument", ctx, u)}
}

func (_c *DBInterface_UpdateUserDocument_Call) Run(run func(ctx context.Context, u *domain.UserDocument)) *DBInterface_UpdateUserDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UserDocument))
	})
	return _c
}

func (_c *DBInterface_UpdateUserDocument_Call) Return(_a0 error) *DBInterface_UpdateUserDocument_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_UpdateUserDocument_Call) RunAndReturn(run func(context.Context, *domain.UserDocument) error) *DBInterface_UpdateUserDocument_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserLevel provides a mock function with given fields: ctx, uid, level, cost
func (_m *DBInterface) UpdateUserLevel(ctx context.Context, uid int64, level int, cost int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, level, cost)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserLevel")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, level, cost)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, level, cost)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, uid, level, cost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserLevel'
type DBInterface_UpdateUserLevel_Call struct {
	*mock.Call
}

// UpdateUserLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - level int
//   - cost int
func (_e *DBInterface_Expecter) UpdateUserLevel(ctx interface{}, uid interface{}, level interface{}, cost interface{}) *DBInterface_UpdateUserLevel_Call {
	return &DBInterface_UpdateUserLevel_Call{Call: _e.mock.On("UpdateUserLevel", ctx, uid, level, cost)}
}

func (_c *DBInterface_UpdateUserLevel_Call) Run(run func(ctx context.Context, uid int64, level int, cost int)) *DBInterface_UpdateUserLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *DBInterface_UpdateUserLevel_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserLevel_Call) RunAndReturn(run func(context.Context, int64, int, int) (domain.UserDocument, error)) *DBInterface_UpdateUserLevel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserNickname provides a mock function with given fields: ctx, uid, nickname, jti
func (_m *DBInterface) UpdateUserNickname(ctx context.Context, uid int64, nickname string, jti uuid.UUID) error {
	ret := _m.Called(ctx, uid, nickname, jti)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserNickname")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, uuid.UUID) error); ok {
		r0 = rf(ctx, uid, nickname, jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_UpdateUserNickname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserNickname'
type DBInterface_UpdateUserNickname_Call struct {
	*mock.Call
}

// UpdateUserNickname is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - nickname string
//   - jti uuid.UUID
func (_e *DBInterface_Expecter) UpdateUserNickname(ctx interface{}, uid interface{}, nickname interface{}, jti interface{}) *DBInterface_UpdateUserNickname_Call {
	return &DBInterface_UpdateUserNickname_Call{Call: _e.mock.On("UpdateUserNickname", ctx, uid, nickname, jti)}
}

func (_c *DBInterface_UpdateUserNickname_Call) Run(run func(ctx context.Context, uid int64, nickname string, jti uuid.UUID)) *DBInterface_UpdateUserNickname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *DBInterface_UpdateUserNickname_Call) Return(_a0 error) *DBInterface_UpdateUserNickname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_UpdateUserNickname_Call) RunAndReturn(run func(context.Context, int64, string, uuid.UUID) error) *DBInterface_UpdateUserNickname_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserQuests provides a mock function with given fields: ctx, uid, quests
func (_m *DBInterface) UpdateUserQuests(ctx context.Context, uid int64, quests domain.UserQuests) error {
	ret := _m.Called(ctx, uid, quests)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserQuests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserQuests) error); ok {
		r0 = rf(ctx, uid, quests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBInterface_UpdateUserQuests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserQuests'
type DBInterface_UpdateUserQuests_Call struct {
	*mock.Call
}

// UpdateUserQuests is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - quests domain.UserQuests
func (_e *DBInterface_Expecter) UpdateUserQuests(ctx interface{}, uid interface{}, quests interface{}) *DBInterface_UpdateUserQuests_Call {
	return &DBInterface_UpdateUserQuests_Call{Call: _e.mock.On("UpdateUserQuests", ctx, uid, quests)}
}

func (_c *DBInterface_UpdateUserQuests_Call) Run(run func(ctx context.Context, uid int64, quests domain.UserQuests)) *DBInterface_UpdateUserQuests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.UserQuests))
	})
	return _c
}

func (_c *DBInterface_UpdateUserQuests_Call) Return(_a0 error) *DBInterface_UpdateUserQuests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBInterface_UpdateUserQuests_Call) RunAndReturn(run func(context.Context, int64, domain.UserQuests) error) *DBInterface_UpdateUserQuests_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTap provides a mock function with given fields: ctx, uid, tap, points
func (_m *DBInterface) UpdateUserTap(ctx context.Context, uid int64, tap domain.UserTap, points int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, tap, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTap")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserTap, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, tap, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.UserTap, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, tap, points)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.UserTap, int) error); ok {
		r1 = rf(ctx, uid, tap, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserTap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTap'
type DBInterface_UpdateUserTap_Call struct {
	*mock.Call
}

// UpdateUserTap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - tap domain.UserTap
//   - points int
func (_e *DBInterface_Expecter) UpdateUserTap(ctx interface{}, uid interface{}, tap interface{}, points interface{}) *DBInterface_UpdateUserTap_Call {
	return &DBInterface_UpdateUserTap_Call{Call: _e.mock.On("UpdateUserTap", ctx, uid, tap, points)}
}

func (_c *DBInterface_UpdateUserTap_Call) Run(run func(ctx context.Context, uid int64, tap domain.UserTap, points int)) *DBInterface_UpdateUserTap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.UserTap), args[3].(int))
	})
	return _c
}

func (_c *DBInterface_UpdateUserTap_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserTap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserTap_Call) RunAndReturn(run func(context.Context, int64, domain.UserTap, int) (domain.UserDocument, error)) *DBInterface_UpdateUserTap_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTapBoost provides a mock function with given fields: ctx, uid, boost, points
func (_m *DBInterface) UpdateUserTapBoost(ctx context.Context, uid int64, boost []int, points int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, boost, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTapBoost")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, boost, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, boost, points)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []int, int) error); ok {
		r1 = rf(ctx, uid, boost, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserTapBoost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTapBoost'
type DBInterface_UpdateUserTapBoost_Call struct {
	*mock.Call
}

// UpdateUserTapBoost is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - boost []int
//   - points int
func (_e *DBInterface_Expecter) UpdateUserTapBoost(ctx interface{}, uid interface{}, boost interface{}, points interface{}) *DBInterface_UpdateUserTapBoost_Call {
	return &DBInterface_UpdateUserTapBoost_Call{Call: _e.mock.On("UpdateUserTapBoost", ctx, uid, boost, points)}
}

func (_c *DBInterface_UpdateUserTapBoost_Call) Run(run func(ctx context.Context, uid int64, boost []int, points int)) *DBInterface_UpdateUserTapBoost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int), args[3].(int))
	})
	return _c
}

func (_c *DBInterface_UpdateUserTapBoost_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserTapBoost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserTapBoost_Call) RunAndReturn(run func(context.Context, int64, []int, int) (domain.UserDocument, error)) *DBInterface_UpdateUserTapBoost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTapEnergyBoost provides a mock function with given fields: ctx, uid, boost, charge, points
func (_m *DBInterface) UpdateUserTapEnergyBoost(ctx context.Context, uid int64, boost []int, charge int, points int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, boost, charge, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTapEnergyBoost")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int, int, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, boost, charge, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int, int, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, boost, charge, points)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []int, int, int) error); ok {
		r1 = rf(ctx, uid, boost, charge, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserTapEnergyBoost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTapEnergyBoost'
type DBInterface_UpdateUserTapEnergyBoost_Call struct {
	*mock.Call
}

// UpdateUserTapEnergyBoost is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - boost []int
//   - charge int
//   - points int
func (_e *DBInterface_Expecter) UpdateUserTapEnergyBoost(ctx interface{}, uid interface{}, boost interface{}, charge interface{}, points interface{}) *DBInterface_UpdateUserTapEnergyBoost_Call {
	return &DBInterface_UpdateUserTapEnergyBoost_Call{Call: _e.mock.On("UpdateUserTapEnergyBoost", ctx, uid, boost, charge, points)}
}

func (_c *DBInterface_UpdateUserTapEnergyBoost_Call) Run(run func(ctx context.Context, uid int64, boost []int, charge int, points int)) *DBInterface_UpdateUserTapEnergyBoost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *DBInterface_UpdateUserTapEnergyBoost_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserTapEnergyBoost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserTapEnergyBoost_Call) RunAndReturn(run func(context.Context, int64, []int, int, int) (domain.UserDocument, error)) *DBInterface_UpdateUserTapEnergyBoost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTapEnergyRecharge provides a mock function with given fields: ctx, uid, available, chargeMax, points
func (_m *DBInterface) UpdateUserTapEnergyRecharge(ctx context.Context, uid int64, available int, chargeMax int, points int) (domain.UserDocument, error) {
	ret := _m.Called(ctx, uid, available, chargeMax, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTapEnergyRecharge")
	}

	var r0 domain.UserDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, int) (domain.UserDocument, error)); ok {
		return rf(ctx, uid, available, chargeMax, points)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int, int) domain.UserDocument); ok {
		r0 = rf(ctx, uid, available, chargeMax, points)
	} else {
		r0 = ret.Get(0).(domain.UserDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int, int) error); ok {
		r1 = rf(ctx, uid, available, chargeMax, points)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBInterface_UpdateUserTapEnergyRecharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTapEnergyRecharge'
type DBInterface_UpdateUserTapEnergyRecharge_Call struct {
	*mock.Call
}

// UpdateUserTapEnergyRecharge is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
//   - available int
//   - chargeMax int
//   - points int
func (_e *DBInterface_Expecter) UpdateUserTapEnergyRecharge(ctx interface{}, uid interface{}, available interface{}, chargeMax interface{}, points interface{}) *DBInterface_UpdateUserTapEnergyRecharge_Call {
	return &DBInterface_UpdateUserTapEnergyRecharge_Call{Call: _e.mock.On("UpdateUserTapEnergyRecharge", ctx, uid, available, chargeMax, points)}
}

func (_c *DBInterface_UpdateUserTapEnergyRecharge_Call) Run(run func(ctx context.Context, uid int64, available int, chargeMax int, points int)) *DBInterface_UpdateUserTapEnergyRecharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *DBInterface_UpdateUserTapEnergyRecharge_Call) Return(_a0 domain.UserDocument, _a1 error) *DBInterface_UpdateUserTapEnergyRecharge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBInterface_UpdateUserTapEnergyRecharge_Call) RunAndReturn(run func(context.Context, int64, int, int, int) (domain.UserDocument, error)) *DBInterface_UpdateUserTapEnergyRecharge_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBInterface creates a new instance of DBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBInterface {
	mock := &DBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
